// Generated by CoffeeScript 1.12.1
(function() {
  var matrix, vector;

  vector = require('vector');

  matrix = [[], [], []];

  matrix.size = [3, 3];

  matrix.create = function() {
    var newMatrix;
    newMatrix = Object.create(this);
    newMatrix.forEach(function(x, i, m) {
      if (i[1] === 0) {
        return m[i[0]] = [];
      }
    });
    return newMatrix;
  };

  matrix.forEach = function(callback) {
    var i, j, k, l, ref, ref1;
    for (i = k = 0, ref = this.size[0]; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      for (j = l = 0, ref1 = this.size[1]; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {
        callback(this[i][j], [i, j], this);
      }
    }
    return void 0;
  };

  matrix.map = function(callback) {
    var m;
    m = this.create();
    this.forEach(function(v, i, a) {
      return m[i[0]][i[1]] = callback(v, i, a);
    });
    return m;
  };

  matrix.reduce = function(callback, sum) {
    this.forEach(function(v, i, a) {
      return sum = callback(sum, v, i, a);
    });
    return sum;
  };

  matrix[':'] = function(n) {
    return this.reduce(function(s, v, i) {
      if (i[1] === n) {
        s.push(v);
      }
      return s;
    }, []);
  };

  matrix.multiply = function(target) {
    if (typeof target === 'number') {
      return this.multiplyScalar(target);
    } else if (target.size.length === 2) {
      return this.multiplyMatrix(target);
    } else if (target.size.length === 1) {
      return this.multiplyVector(target);
    } else {
      throw new Error("not vector or matrix");
    }
  };

  matrix.multiplyMatrix = function(m) {
    return this.map(function(v, i, a) {
      return a[i[0]].reduce(function(s, v, j) {
        return s + v * m[j][i[1]];
      }, 0);
    });
  };

  matrix.multiplyVector = function(v) {
    return v.map((function(_this) {
      return function(vi, i, v) {
        return _this[i].reduce(function(s, mi, i) {
          return s + mi * v[i];
        }, 0);
      };
    })(this));
  };

  matrix.multiplyScalar = function(scalar) {
    return this.map(function(x) {
      return scalar * x;
    });
  };

  matrix.add = function(m) {
    return this.map(function(v, i) {
      return v + m[i[0]][i[1]];
    });
  };

  matrix.slice = function(start, end) {
    return this.reduce(function(s, v) {
      s.push(v);
      return s;
    }, []).slice(start, end);
  };

  matrix.toString = function() {
    return this.join();
  };

  matrix.join = function(fs, rs) {
    if (fs == null) {
      fs = '\t';
    }
    if (rs == null) {
      rs = '\n';
    }
    return this.reduce(function(s, x, i) {
      switch (false) {
        case !(i[0] === 0 && i[1] === 0):
          return s + x;
        case i[1] !== 0:
          return s + rs + x;
        default:
          return s + fs + x;
      }
    }, '');
  };

  matrix.createFromNumber = function(x) {
    return this.map(function() {
      return x;
    });
  };

  matrix.createIdentity = function() {
    return this.map(function(x, i) {
      if (i[0] === i[1]) {
        return 1;
      } else {
        return 0;
      }
    });
  };

  matrix.createFromArray = function(a) {
    return this.map(function(x, i) {
      return a[i[0] * 3 + i[1]];
    });
  };

  matrix.createFromArray2D = function(a) {
    return this.map(function(x, i) {
      return a[i[0]][i[1]];
    });
  };

  matrix.every = function(callback) {
    return this.reduce(function(t, x, i, m) {
      return t && callback(x, i, m);
    }, true);
  };

  matrix.some = function(callback) {
    return this.reduce(function(t, x, i, m) {
      return t || callback(x, i, m);
    }, false);
  };

  matrix.equal = function(m, error) {
    if (error == null) {
      error = 1e-5;
    }
    return this.multiply(-1).add(m).every(function(x) {
      return Math.abs(x) <= error;
    });
  };

  matrix.det = function() {
    var left, mod, right;
    mod = function(s) {
      return ((s % 3) + 3) % 3;
    };
    right = this.reduce(function(a, x, i) {
      var j;
      j = mod(i[1] - i[0]);
      a[j] *= x;
      return a;
    }, [1, 1, 1]).reduce((function(s, x) {
      return s + x;
    }), 0);
    left = this.reduce(function(a, x, i) {
      var j;
      j = mod(i[1] + i[0]);
      a[j] *= x;
      return a;
    }, [1, 1, 1]).reduce((function(s, x) {
      return s + x;
    }), 0);
    return right - left;
  };

  matrix.constructor = matrix.create;

  matrix.create.prototype = matrix;

  if (module && module.exports) {
    module.exports = matrix;
  } else if (window) {
    window.matrix = matrix;
  }

}).call(this);
