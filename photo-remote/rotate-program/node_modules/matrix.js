// Generated by CoffeeScript 1.12.1
(function() {
  var matrix, multiplyMatrix, multiplyVector;

  multiplyMatrix = function(m1, m2) {
    return m1.map(function(v, i, a) {
      return a[i[0]].reduce(function(s, v, j) {
        return s + v * m2[j][i[1]];
      }, 0);
    });
  };

  multiplyVector = function(m, v) {
    return v.map(function(vi, i, v) {
      return m[i].reduce(function(s, mi, i) {
        return s + mi * v[i];
      }, 0);
    });
  };

  matrix = {
    '0': [],
    '1': [],
    '2': [],
    size: [3, 3],
    forEach: function(callback) {
      var i, j, k, l;
      for (i = k = 0; k <= 2; i = ++k) {
        for (j = l = 0; l <= 2; j = ++l) {
          callback(this[i][j], [i, j], this);
        }
      }
      return void 0;
    },
    map: function(callback) {
      var m;
      m = this.create();
      this.forEach(function(v, i, a) {
        return m[i[0]][i[1]] = callback(v, i, a);
      });
      return m;
    },
    reduce: function(callback, sum) {
      this.forEach(function(v, i, a) {
        return sum = callback(sum, v, i, a);
      });
      return sum;
    },
    ':': function(n) {
      return this.reduce(function(s, v, i) {
        if (i[1] === n) {
          s.push(v);
        }
        return s;
      }, []);
    },
    multiply: function(target) {
      if (target.size.length === 2) {
        return multiplyMatrix(this, target);
      } else if (target.size.length === 1) {
        return multiplyVector(this, target);
      } else {
        throw new Error("not vector or matrix");
      }
    },
    add: function(m) {
      return this.map(function(v, i) {
        return v + m[i[0]][i[1]];
      });
    },
    slice: function(start, end) {
      return (this.reduce((function(s, v) {
        return s.push(v);
      }), [])).slice(start, end);
    },
    toString: function() {
      return this.reduce(function(s, v, i) {
        if (i[1] === 0) {
          return s + '\n' + v;
        } else {
          return s + '\t' + v;
        }
      }, '');
    },
    createFromNumber: function(x) {
      return this.map(function() {
        return x;
      });
    },
    createIdentity: function() {
      return this.map(function(x, i) {
        if (i[0] === i[1]) {
          return 1;
        } else {
          return 0;
        }
      });
    },
    createFromArray: function(a) {
      return this.map(function(x, i) {
        return a[i[0] * 3 + i[1]];
      });
    },
    createFromArray2D: function(a) {
      return this.map(function(x, i) {
        return a[i[0]][i[1]];
      });
    }
  };

  matrix.create = function() {
    var newMatrix;
    newMatrix = Object.create(matrix);
    this.forEach(function(x, i) {
      if (i[1] === 0) {
        return newMatrix[i[0]] = [];
      }
    });
    return newMatrix;
  };

  if (module && module.exports) {
    module.exports = matrix;
  } else if (window) {
    window.matrix = matrix;
  }

}).call(this);
