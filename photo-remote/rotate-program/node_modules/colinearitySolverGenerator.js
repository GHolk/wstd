// Generated by CoffeeScript 1.12.1
(function() {
  var colinearitySolverGenerator, matrix, rotateMatrix, vector;

  switch (false) {
    case !require:
      vector = require('vector');
      matrix = require('matrix');
      rotateMatrix = require('rotateMatrix');
      break;
    case !window:
      vector = window.vector;
      matrix = window.matrix;
      rotateMatrix = rotateMatrix;
  }

  colinearitySolverGenerator = function(parameter, interiorOrientalParameter) {
    var c, cameraToPhotoVector, cameraVector, kappa, omega, phi, spaceToPhotoMatrix, xo, xp, yo, yp, zo;
    c = parameter.c, xp = parameter.xp, yp = parameter.yp, omega = parameter.omega, phi = parameter.phi, kappa = parameter.kappa, xo = parameter.xo, yo = parameter.yo, zo = parameter.zo;
    spaceToPhotoMatrix = rotateMatrix.wfk(omega, phi, kappa);
    cameraVector = vector.createFromArray([xo, yo, zo]);
    cameraToPhotoVector = interiorOrientalParameter || vector.createFromArray([xp, yp, c]);
    return function(xa, ya, za) {
      var pointVector, scale, unScaleVector;
      pointVector = vector.createFromArray([xa, ya, za]);
      unScaleVector = spaceToPhotoMatrix.multiply(pointVector.add(cameraVector.multiply(-1)));
      scale = -cameraToPhotoVector[2] / unScaleVector[2];
      return unScaleVector.multiply(scale).add(cameraToPhotoVector);
    };
  };

  switch (false) {
    case !(module && module.exports):
      module.exports = colinearitySolverGenerator;
      break;
    case !exports:
      exports.colinearitySolverGenerator = colinearitySolverGenerator;
      break;
    case !window:
      window.colinearitySolverGenerator = colinearitySolverGenerator;
  }

}).call(this);
