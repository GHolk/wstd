// Generated by CoffeeScript 1.12.1
(function() {
  var vector;

  vector = [];

  vector.size = [3];

  vector.length = 3;

  vector.forEach = function(callback) {
    var i, j, ref;
    for (i = j = 0, ref = this.size[0]; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      callback(this[i], i, this);
    }
    return void 0;
  };

  vector.map = function(callback) {
    var v;
    v = this.create();
    this.forEach(function(x, i, a) {
      return v[i] = callback(x, i, a);
    });
    return v;
  };

  vector.reduce = function(callback, sum) {
    this.forEach(function(x, i, a) {
      return sum = callback(sum, x, i, a);
    });
    return sum;
  };

  vector.dot = function(v) {
    return this.reduce(function(s, x, i) {
      return s + x * v[i];
    }, 0);
  };

  vector.cross = function(v) {
    var strike;
    strike = (function(_this) {
      return function(w, v, i) {
        return w[(i + 1) % _this.size[0]] * v[(i + 2) % _this.size[0]];
      };
    })(this);
    return this.map(function(x, i, w) {
      return strike(w, v, i) - strike(v, w, i);
    });
  };

  vector.multiply = function(n) {
    return this.map(function(x) {
      return n * x;
    });
  };

  vector.add = function(v) {
    return this.map(function(x, i) {
      return x + v[i];
    });
  };

  vector.toString = function() {
    return this.join('\t');
  };

  vector.create = function() {
    return Object.create(vector);
  };

  vector.createFromNumber = function(n) {
    return this.map(function() {
      return n;
    });
  };

  vector.createFromArray = function(a) {
    return this.map(function(x, i) {
      return a[i];
    });
  };

  vector.equal = function(v, error) {
    if (error == null) {
      error = 1e-5;
    }
    return this.every(function(x, i) {
      return Math.abs(x - v[i]) <= error;
    });
  };

  if (module && module.exports) {
    module.exports = vector;
  } else if (window) {
    window.vector = vector;
  }

}).call(this);
