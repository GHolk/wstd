
switch
# load matrix and vector module
    when require
        vector = require 'vector'
        matrix = require 'matrix'
        rotateMatrix = require 'rotateMatrix'
    when window
        vector = window.vector
        matrix = window.matrix
        rotateMatrix = rotateMatrix


class ColinearityEquation
    constructor: (parameter, interiorOrientalParameter) ->
        # [xa - xp] = scale * M * [Xp - Xo]

        {c,xp,yp, omega,phi,kappa, xo,yo,zo} = parameter

        # compute rotate matrix from ground to image. 
        # spaceToPhotoMatrix = M
        @groundToPhotoMatrix = rotateMatrix.wfk omega, phi, kappa

        # camera position vector in ground system.
        # cameraVector = Xo
        @cameraInSpaceVector = vector.createFromArray [xo,yo,zo]

        @cameraToPhotoVector =
            interiorOrientalParameter || vector.createFromArray [xp,yp,c]

        # return a function base on previous 3 vector/matrix.
        # @param {number} ground x
        # @param {number} ground y
        # @param {number} ground z
        # @return {vector} [x,y,z] in vector object, 
        #   vector is a array like object defined in vector module.

    groundToPhoto: (groundPointVector) ->
        # unScaleVector = M * [Xp - Xo]
        unScaleVector = @groundToPhotoMatrix
            .multiply groundPointVector.minus @cameraInSpaceVector

        # solve the scala factor by focus
        scale = - @cameraToPhotoVector[2] / unScaleVector[2]

        # scale unScaleVector
        unScaleVector
            .multiply scale
            .add cameraToPhotoVector

    photoToGround: (
        photoPoint
        groundPointVector = vector.createFromNumber 0
    ) ->
        unScaleVector = @cameraToPhotoVector
            .minus photoPointVector
            .multiply @groundToPhotoMatrix.invert()

# export modules
switch
    when module && module.exports
        module.exports = ColinearityEquation
    when exports
        exports.colinearitySolverGenerator = ColinearityEquation
    when window
        window.colinearitySolverGenerator = ColinearityEquation

