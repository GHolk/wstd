
vector = []
vector.size = [3]
vector.length = 3

vector.forEach = (callback) ->
    for i in [0 ... @size[0]]
        callback @[i], i, this
    return undefined

vector.map = (callback) ->
    v = @create()
    @forEach (x,i,a) -> v[i] = callback x,i,a
    return v

vector.reduce = (callback, sum) ->
    @forEach (x,i,a) -> sum = callback sum,x,i,a
    return sum

vector.dot = (v) ->
    @multiply(v).reduce ((s,x) -> s+x), 0

vector.norm = ->
    Math.sqrt @dot this

vector.cross = (v) ->
    strike = (w,v,i) => w[(i+1) % @size[0]] * v[(i+2) % @size[0]]
    @map (x,i,w) -> strike(w,v,i) - strike(v,w,i)

vector.multiplyNumber = (n) ->
    @map (x) -> n*x

vector.multiplyVector = (v) ->
    @map (x,i) -> x*v[i]

vector.multiply = (o) ->
    if typeof o == 'number'
        @multiplyNumber o
    else if o instanceof Array
        @multiplyVector o

vector.power = (n) ->
    prod = vector.createFromNumber 1
    for times in [1..n]
        prod = @multiply prod
    return prod

vector.add = (v) ->
    @map (x,i) -> x + v[i]

vector.minus = (v) ->
    @multiply -1
        .add v
        .multiply -1

vector.toString = ->
    @join '\t'

vector.create = -> Object.create this

vector.createFromNumber = (n) ->
    @map -> n

vector.createFromArray = (a) ->
    @map (x,i) -> a[i]

vector.equal = (v, error = 1e-5) ->
    @every (x,i) -> Math.abs(x-v[i]) <= error


vector.create.prototype = vector
vector.constructor = vector.create

if module && module.exports
    module.exports = vector
else if window
    window.vector = vector

