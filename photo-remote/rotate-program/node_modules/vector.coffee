
vector = []
vector.size = [3]
vector.length = 3

vector.forEach = (callback) ->
    for i in [0 ... @size[0]]
        callback @[i], i, this
    return undefined

vector.map = (callback) ->
    v = @create()
    @forEach (x,i,a) -> v[i] = callback x,i,a
    return v

vector.reduce = (callback, sum) ->
    @forEach (x,i,a) -> sum = callback x,i,a
    return sum

vector.dot = (v) ->
    @reduce(
        (s,x,i) -> s + x*v[i]
        0
    )

vector.cross = (v) ->
    strike = (w,v,i) -> w[i+1 % 3] * v[i+2 % 3]
    @map (x,i,w) -> strike(w,v,i) - strike(v,w,i)

vector.multiply = (n) ->
    @map (x) -> n*x

vector.add = (v) ->
    @map (x,i) -> x + v[i]

vector.toString = ->
    @join '\t'

vector.create = -> Object.create vector

vector.createFromNumber = (n) ->
    @map -> n

vector.createFromArray = (a) ->
    @map (x,i) -> a[i]

if module && module.exports
    module.exports = vector
else if window
    window.vector = vector

