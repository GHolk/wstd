// Generated by CoffeeScript 1.12.1
(function() {
  var Matrix3, cos, md, rotateMatrix, rotateWFKMatrix, sin;

  Matrix3 = (function() {
    function Matrix3(a) {
      var i, l, o;
      if (a == null) {
        a = 0;
      }
      if (typeof a === 'number') {
        a = [1, 2, 3, 4, 5, 6, 7, 8, 9].map(function() {
          return a;
        });
      }
      if (a.length >= 9) {
        for (i = l = 0; l <= 2; i = ++l) {
          this[i] = a.slice(i * 3, (i + 1) * 3);
        }
      } else if (a.length >= 3) {
        for (i = o = 0; o <= 2; i = ++o) {
          this[i] = a[i].slice(0);
        }
      } else {
        throw new Error('arguments not array!');
      }
    }

    Matrix3.prototype.size = [3, 3];

    Matrix3.prototype.forEach = function(callback) {
      var i, j, l, o;
      for (i = l = 0; l <= 2; i = ++l) {
        for (j = o = 0; o <= 2; j = ++o) {
          callback(this[i][j], [i, j], this);
        }
      }
      return void 0;
    };

    Matrix3.prototype.map = function(callback) {
      var m;
      m = new Matrix3();
      this.forEach(function(v, i, a) {
        return m[i[0]][i[1]] = callback(v, i, a);
      });
      return m;
    };

    Matrix3.prototype.reduce = function(callback, sum) {
      this.forEach(function(v, i, a) {
        return sum = callback(sum, v, i, a);
      });
      return sum;
    };

    Matrix3.prototype[':'] = function(n) {
      return this.reduce(function(s, v, i) {
        if (i[1] === n) {
          s.push(v);
        }
        return s;
      }, []);
    };

    Matrix3.prototype.multiply = function(m) {
      return this.map(function(v, i, a) {
        return a[i[0]].reduce(function(s, v, j) {
          return s + v * m[j][i[1]];
        }, 0);
      });
    };

    Matrix3.prototype.add = function(m) {
      return this.map(function(v, i) {
        return v + m[i[0]][i[1]];
      });
    };

    Matrix3.prototype.slice = function(start, end) {
      return (this.reduce((function(s, v) {
        return s.push(v);
      }), [])).slice(start, end);
    };

    return Matrix3;

  })();

  sin = Math.sin;

  cos = Math.cos;

  rotateMatrix = {
    omega: function(w) {
      return new Matrix3([[1, 0, 0], [0, cos(w), sin(w)], [0, -sin(w), cos(w)]]);
    },
    phi: function(f) {
      return new Matrix3([[cos(f), 0, -sin(f)], [0, 1, 0], [sin(f), 0, cos(f)]]);
    },
    kappa: function(k) {
      return new Matrix3([[cos(k), sin(k), 0], [-sin(k), cos(k), 0], [0, 0, 1]]);
    }
  };

  rotateWFKMatrix = function(w, f, k) {
    return rotateMatrix.kappa(k).multiply(rotateMatrix.phi(f)).multiply(rotateMatrix.omega(w));
  };

  if (typeof exports === 'object') {
    md = exports;
  } else if (typeof window === 'object') {
    window.rotateWFK = {};
    md = window.rotateWFK;
  } else {
    md = {};
  }

  md.Matrix3 = Matrix3;

  md.rotateMatrix = rotateMatrix;

  md.rotateWFKMatrix = rotateWFKMatrix;

}).call(this);
